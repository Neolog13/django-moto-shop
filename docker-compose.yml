services:
  # postgres:
  #   image: postgres:latest
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: 
  #     POSTGRES_PASSWORD: 1234
  #     POSTGRES_DB: motoapp
  #   ports:
  #     - "5432:5432"

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
  




  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: promtail
  #   ports:
  #     - "9080:9080"
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ../monitoring/promtail-config.yaml:/etc/promtail/config.yml
  #   command: -config.file=/etc/promtail/config.yml
  #   privileged: true

  # loki:
  #   image: grafana/loki:latest
  #   container_name: loki
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ../monitoring/loki-config.yaml:/etc/loki/local-config.yaml

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheusdata:/prometheus

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - ../monitoring/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  #     - grafanadata:/var/lib/grafana


  app:
    build:
      context: .
    container_name: app
    ports:
      - "8001:8000"
    depends_on:
      - postgres
    restart: on-failure
    env_file:
      - .env 
    # environment:
    #   DEBUG: "False"
    #   DB_NAME: motoapp
    #   DB_USER: motoapp
    #   DB_PASSWORD: 1234
    #   DB_HOST: "postgres"
    #   DB_PORT: 5432
    volumes:
      - ./static:/app/staticfiles
      # - static_volume:/app/staticfiles
    # command: /bin/sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn app.wsgi:application --bind 0.0.0.0:8000"

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - app
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static/:/app/static
    ports:
      - "80:80"


volumes:
  postgres_data:
  # static_volume:
# volumes:
#   grafanadata:
#   prometheusdata: